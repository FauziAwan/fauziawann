<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Belajar Git on Petani Kode — Programmer Pengguna Linux</title>
    <link>https://www.petanikode.com/seri/belajar-git/</link>
    <description>Recent content in Belajar Git on Petani Kode — Programmer Pengguna Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-id</language>
    <copyright>Copyright (c) 2017, Petani Kode; all rights reserved.</copyright>
    <lastBuildDate>Mon, 27 Feb 2017 19:20:26 +0800</lastBuildDate>
    
	<atom:link href="https://www.petanikode.com/seri/belajar-git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tutorial Git 07 - Percabangan</title>
      <link>https://www.petanikode.com/git-branch/</link>
      <pubDate>Mon, 27 Feb 2017 19:20:26 +0800</pubDate>
      
      <guid>https://www.petanikode.com/git-branch/</guid>
      <description>Bayangkan anda sedang bekerja dengan tim pada suatu repositori Git. Repositori ini dikerjakan secara bersama-sama.
Kadang&amp;hellip; akan terjadi konflik, karena kode yang kita tulis berbeda dengan yang lain.
Misalnya, Si A menulis kode untuk fitur X dengan algoritma yang ia ketahui. Sedangkan si B menulis dengan algoritma yang berbeda.
Lalu mereka melakukan commit, dan kode sumber jadi berantakan. Anggota tim yang lain menjadi pusing.

Agar tidak terjadi hal yang seperti ini, kita harus membuat cabang (branch) tersendiri.</description>
    </item>
    
    <item>
      <title>Tutorial Git 06 - Membatalkan Revisi</title>
      <link>https://www.petanikode.com/git-revert/</link>
      <pubDate>Tue, 21 Feb 2017 14:55:42 +0800</pubDate>
      
      <guid>https://www.petanikode.com/git-revert/</guid>
      <description>Pada tutorial git 05, kita sudah belajar cara melihat perbedaan di setiap revisi. Sekarang kita akan belajar, cara membatalkan sebuah revisi.
Terkadang pada perubahan yang kita lakukan terjadi kesalahan dan kita ingin mengembalikannya seperti keadaan sebelumnya. Maka kita perlu menyuruh git untuk megembalikannya. Ada beberapa perintah yang digunakan diantaranya: git checkout, git reset, dan git revert.
Membatalkan Perubahan Jika revisi kita belum staged ataupun committed, kita bisa mengembalikannya menggunakan perintah git checkout nama_file.</description>
    </item>
    
    <item>
      <title>Tutorial Git 05 - Melihat Perbandingan Revisi</title>
      <link>https://www.petanikode.com/git-diff/</link>
      <pubDate>Thu, 16 Feb 2017 13:56:42 +0800</pubDate>
      
      <guid>https://www.petanikode.com/git-diff/</guid>
      <description>Pada tutorial sebelumnya, kita sudah belajar cara melihat log revisi di repositori. Sekarang kita kan peljari perintah git diff, fungsinya untuk melihat perbedaan perubahan di revisi.
Melihat Perbandingan Perubahan yang Dilakukan pada Revisi Gunakan perintah berikut ini untuk melihat perubahan yang dilakukan pada revisi tertentu.
git diff cf08ca0837cf26f1c595be36bb3a6b815e311be1  cf08ca0837cf26f1c595be36bb3a6b815e311be1 adalah nomer revisi yang ingin dilihat.

Lihatlah hasil di atas, simbol plus (+) artinya kode yang ditambahkan. Sedangkan kalau ada kode yang dihapus simbolnya akan menggunakan minus (-).</description>
    </item>
    
    <item>
      <title>Tutorial Git 04 - Melihat Log Revisi</title>
      <link>https://www.petanikode.com/git-log/</link>
      <pubDate>Tue, 14 Feb 2017 08:56:09 +0800</pubDate>
      
      <guid>https://www.petanikode.com/git-log/</guid>
      <description>Pada tutorial sebelumnya, kita sudah membuat dua revisi pada repositori project-01. Sekarang bagaimana caranya kita melihat catatan log dari revisi-reivisi tersebut?
Git sudah menyediakan perintah git log untuk melihat catatan log perubahan pada respositori. Contoh penggunaannya:
git log  Maka kita akan melihat log perubahan apa saja yang sudah dilakukan dalam repositori.

Pada gambar di atas, terdapat dua revisi perubahan yang telah dilakuan.

Log yang Lebih Pendek Untuk menampilkan log yang lebih pendek, kita bisa menambahkan argumen --oneline.</description>
    </item>
    
    <item>
      <title>Tutorial Git 03 - Membuat Revisi</title>
      <link>https://www.petanikode.com/git-commit/</link>
      <pubDate>Mon, 13 Feb 2017 17:30:51 +0800</pubDate>
      
      <guid>https://www.petanikode.com/git-commit/</guid>
      <description>Pada tutorial Git yang kedua, kita sudah membuat repositori kosong. Belum ada apa-apa di sana.
Sekarang coba tambahkan sebuah file baru.
Sebagai contoh, saya akan menambahkan tiga file HTML kosong.

Setalah ditambahkan, coba ketik perintah git status untuk melihat status repositorinya.

Berdasarkan keterangan di atas, saat ini kita berada cabang (branch) master dan ada tiga file yang belum ditambahkan ke Git.
  (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
    <item>
      <title>Tutorial Git 02 - Membuat Repositori</title>
      <link>https://www.petanikode.com/git-init/</link>
      <pubDate>Thu, 09 Feb 2017 11:52:59 +0800</pubDate>
      
      <guid>https://www.petanikode.com/git-init/</guid>
      <description>Repositori (repository) dalam bahasa indonesia artinya gudang. Repositori merupakan istilah yang digunakan untuk direktori proyek yang menggunakan Git.
Jika kita memiliki sebuah direktori dengan nama proyek-01 dan di dalamnya sudah menggunakan git, maka kita sudah punya repositori bernama proyek-01.
Membuat Repositori Pembuatan repositori dapat dilakukan dengan perintah git init nama-dir. Contoh:
git init proyek-01  Perintah tersebut akan membuat direktori bernama proyek-01. Kalau direktorinya sudah ada, maka Git akan melakukan inisialisasi di dalam direktori tersebut.</description>
    </item>
    
    <item>
      <title>Belajar Dasar Git: Instalasi dan Persiapan (untuk pemula)</title>
      <link>https://www.petanikode.com/git-install/</link>
      <pubDate>Wed, 08 Feb 2017 11:26:37 +0800</pubDate>
      
      <guid>https://www.petanikode.com/git-install/</guid>
      <description>Kita sudah mengenal Git pada tulisan sebelumnya. Selanjutnya Kita akan melakukan instalasi dan persiapan.
Tulisan ini terbagi menjadi tiga bagian:
 Cara Instalasi Git di Linux. Cara Instalasi Git di Windows. Konfigurasi Awal yang Harus dilakukan Setelah Menginstal Git.  Mari kita mulai&amp;hellip;
1. Cara Install Git di Linux Instalasi Git pada Distro keluarga Debian dapat menggunakan perintah apt.
sudo apt install git  atau
sudo apt-get install git  Pada Fedora:</description>
    </item>
    
    <item>
      <title>Apa itu Git dan Kenapa Penting bagi Programmer?</title>
      <link>https://www.petanikode.com/git-untuk-pemula/</link>
      <pubDate>Wed, 08 Feb 2017 09:08:36 +0800</pubDate>
      
      <guid>https://www.petanikode.com/git-untuk-pemula/</guid>
      <description>Git adalah salah satu tool yang sering digunakan dalam proyek pengembangan software.
Git bahkan menjadi tool yang wajib dipahami oleh programmer, karena banyak digunakan di mana-mana.
Pada kesempatan ini kita akan belajar Git dari dasar.
Artikel ini hanya akan membahas pengenalan Git saja. Untuk mempelajari Git lebih lanjut, saya sudah menyediakan link di bagian akhir.
Mengenal Git Git adalah salah satu sistem pengontrol versi (Version Control System) pada proyek perangkat lunak yang diciptakan oleh Linus Torvalds.</description>
    </item>
    
  </channel>
</rss>