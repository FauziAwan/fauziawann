<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Belajar Git on Petani Kode — Programmer Pengguna Linux</title>
    <link>https://www.petanikode.com/seri/belajar-git/</link>
    <description>Recent content in Belajar Git on Petani Kode — Programmer Pengguna Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-id</language>
    <copyright>Copyright (c) 2017, Petani Kode; all rights reserved.</copyright>
    <lastBuildDate>Mon, 27 Feb 2017 19:20:26 +0800</lastBuildDate>
    
	<atom:link href="https://www.petanikode.com/seri/belajar-git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tutorial Git 07 - Percabangan</title>
      <link>https://www.petanikode.com/tutorial-git-07---percabangan/</link>
      <pubDate>Mon, 27 Feb 2017 19:20:26 +0800</pubDate>
      
      <guid>https://www.petanikode.com/tutorial-git-07---percabangan/</guid>
      <description>Bayangkan anda sedang bekerja dengan tim pada suatu repositori Git. Repositori ini dikerjakan secara bersama-sama.
Kadang&amp;hellip; akan terjadi konflik, karena kode yang kita tulis berbeda dengan yang lain.
Misalnya, Si A menulis kode untuk fitur X dengan algoritma yang ia ketahui. Sedangkan si B menulis dengan algoritma yang berbeda.
Lalu mereka melakukan commit, dan kode sumber jadi berantakan. Anggota tim yang lain menjadi pusing.

Agar tidak terjadi hal yang seperti ini, kita harus membuat cabang (branch) tersendiri.</description>
    </item>
    
    <item>
      <title>Tutorial Git 06 - Membatalkan Revisi</title>
      <link>https://www.petanikode.com/tutorial-git-06---membatalkan-revisi/</link>
      <pubDate>Tue, 21 Feb 2017 14:55:42 +0800</pubDate>
      
      <guid>https://www.petanikode.com/tutorial-git-06---membatalkan-revisi/</guid>
      <description>Pada tutorial git 05, kita sudah belajar cara melihat perbedaan di setiap revisi. Sekarang kita akan belajar, cara membatalkan sebuah revisi.
Terkadang pada perubahan yang kita lakukan terjadi kesalahan dan kita ingin mengembalikannya seperti keadaan sebelumnya. Maka kita perlu menyuruh git untuk megembalikannya. Ada beberapa perintah yang digunakan diantaranya: git checkout, git reset, dan git revert.
Membatalkan Perubahan Jika revisi kita belum staged ataupun committed, kita bisa mengembalikannya menggunakan perintah git checkout nama_file.</description>
    </item>
    
    <item>
      <title>Tutorial Git 05 - Melihat Perbandingan Revisi</title>
      <link>https://www.petanikode.com/tutorial-git-05---melihat-perbandingan-revisi/</link>
      <pubDate>Thu, 16 Feb 2017 13:56:42 +0800</pubDate>
      
      <guid>https://www.petanikode.com/tutorial-git-05---melihat-perbandingan-revisi/</guid>
      <description>Pada tutorial sebelumnya, kita sudah belajar cara melihat log revisi di repositori. Sekarang kita kan peljari perintah git diff, fungsinya untuk melihat perbedaan perubahan di revisi.
Melihat Perbandingan Perubahan yang Dilakukan pada Revisi Gunakan perintah berikut ini untuk melihat perubahan yang dilakukan pada revisi tertentu.
git diff cf08ca0837cf26f1c595be36bb3a6b815e311be1  cf08ca0837cf26f1c595be36bb3a6b815e311be1 adalah nomer revisi yang ingin dilihat.

Lihatlah hasil di atas, simbol plus (+) artinya kode yang ditambahkan. Sedangkan kalau ada kode yang dihapus simbolnya akan menggunakan minus (-).</description>
    </item>
    
    <item>
      <title>Tutorial Git 04 - Melihat Log Revisi</title>
      <link>https://www.petanikode.com/tutorial-git-04---melihat-log-revisi/</link>
      <pubDate>Tue, 14 Feb 2017 08:56:09 +0800</pubDate>
      
      <guid>https://www.petanikode.com/tutorial-git-04---melihat-log-revisi/</guid>
      <description>Pada tutorial sebelumnya, kita sudah membuat dua revisi pada repositori project-01. Sekarang bagaimana caranya kita melihat catatan log dari revisi-reivisi tersebut?
Git sudah menyediakan perintah git log untuk melihat catatan log perubahan pada respositori. Contoh penggunaannya:
git log  Maka kita akan melihat log perubahan apa saja yang sudah dilakukan dalam repositori.

Pada gambar di atas, terdapat dua revisi perubahan yang telah dilakuan.

Log yang Lebih Pendek Untuk menampilkan log yang lebih pendek, kita bisa menambahkan argumen --oneline.</description>
    </item>
    
    <item>
      <title>Tutorial Git 03 - Membuat Revisi</title>
      <link>https://www.petanikode.com/tutorial-git-03---membuat-revisi/</link>
      <pubDate>Mon, 13 Feb 2017 17:30:51 +0800</pubDate>
      
      <guid>https://www.petanikode.com/tutorial-git-03---membuat-revisi/</guid>
      <description>Pada tutorial git yang kedua, kita sudah membuat repositori kosong. Belum ada apa-apa di sana. Sekarang coba tambahkan sebuah file baru. Sebagai contoh, saya akan menambahkan tiga file HTML kosong.

Setalah ditambahkan, coba ketik perintah git status untuk melihat status repositorinya.

Berdasarkan keterangan di atas, saat ini kita berada cabang (branch) master dan ada tiga file yang belum ditambahkan ke Git.

Tiga Kelompok Kondisi File dalam Git Sebelum kita membuat revisi, kita akan berkenalan dulu dengan tiga kondisi file dalam Git.</description>
    </item>
    
    <item>
      <title>Panduan Cara Instal Git di Windows</title>
      <link>https://www.petanikode.com/cara-instal-git-di-windows/</link>
      <pubDate>Fri, 10 Feb 2017 01:42:35 +0800</pubDate>
      
      <guid>https://www.petanikode.com/cara-instal-git-di-windows/</guid>
      <description>Instalasi Git di Windows memang tidak seperti di Linux yang ketik perintah langsung terinstal.
Kita harus menguduh dulu, kemudian melakukan ritual next&amp;gt;next&amp;gt;finish.
Tapi dalam ritual tersebut, ada pilihan yang harus diperhatikan agar perintah git dapat dikenali di CMD.
Baiklah, kali ini saya numpang screenshot di laptop teman yang menggunakan windows untuk pembuatan tutorial ini.
Silahkan disimak ya :smile:.
Unduh Git Silahkan buka website resminya Git (git-scm.com). Kemudian unduh Git sesuai dengan arsitektur komputer kita.</description>
    </item>
    
    <item>
      <title>Tutorial Git 02 - Membuat Repositori</title>
      <link>https://www.petanikode.com/tutorial-git-02---membuat-repositori/</link>
      <pubDate>Thu, 09 Feb 2017 11:52:59 +0800</pubDate>
      
      <guid>https://www.petanikode.com/tutorial-git-02---membuat-repositori/</guid>
      <description>Repositori (repository) dalam bahasa indonesia artinya gudang. Repositori merupakan istilah yang digunakan untuk direktori proyek yang menggunakan Git. Jika kita memiliki sebuah direktori dengan nama proyek-01 dan di dalamnya sudah menggunakan git, maka kita sudah punya repositori bernama proyek-01.
Membuat Repositori Pembuatan repositori dapat dilakukan dengan perintah git init nama-dir. Contoh:
git init proyek-01  Perintah tersebut akan membuat direktori bernama proyek-01. Kalau direktorinya sudah ada, maka Git akan melakukan inisialisasi di dalam direktori tersebut.</description>
    </item>
    
    <item>
      <title>Belajar Git 01: Instalasi dan Persiapan</title>
      <link>https://www.petanikode.com/git-dasar/</link>
      <pubDate>Wed, 08 Feb 2017 11:26:37 +0800</pubDate>
      
      <guid>https://www.petanikode.com/git-dasar/</guid>
      <description>Kita sudah mengenal Git pada tulisan sebelumnya. Sekarang Kita akan melakukan instalasi dan persiapan.
Instalasi Git Instalasi pada Ubuntu dan keluarga Debian lainnya dapat menggunakan perintah ini.
sudo apt install git  atau
sudo apt-get install git  Fedora:
yum install git  Windows: Cara Instal Git di Windows
 Download Git Instal, Next, Next, Finish  Persiapan Ada beberapa konfigurasi yang harus dupersiapakan sebelum mulai menggunakan Git, seperti name dan email.</description>
    </item>
    
    <item>
      <title>Apa itu Git dan Kenapa Penting bagi Programmer?</title>
      <link>https://www.petanikode.com/apa-itu-git-dan-kenapa-penting-bagi-programmer/</link>
      <pubDate>Wed, 08 Feb 2017 09:08:36 +0800</pubDate>
      
      <guid>https://www.petanikode.com/apa-itu-git-dan-kenapa-penting-bagi-programmer/</guid>
      <description>Git adalah salah satu sistem pengontrol versi (Version Control System) pada proyek perangkat lunak yang diciptakan oleh Linus Torvalds.
Pengontrol versi bertugas mencatat setiap perubahan pada file proyek.
Awalnya Linus Torvalds menciptakan Git untuk mengelola kode sumber (source kode) kernel Linux.
Kemudian, Linus Torvalds mempublikasikannya dengan lisensi open soure, semua orang jadi bisa pakai Git secara gratis.
Sungguh baik ya bapak Linus Torvalds :smile:.
Kenapa Git diciptakan? Bayangkan ada 1000 programmer dari seluruh dunia yang ikut berkontribusi membangun kernel Linux.</description>
    </item>
    
  </channel>
</rss>