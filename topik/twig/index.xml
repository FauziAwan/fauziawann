<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Twig on Petani Kode</title>
    <link>https://petanikode.gitlab.io/topik/twig/</link>
    <description>Recent content in Twig on Petani Kode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-id</language>
    <copyright>Copyright (c) 2017, Petani Kode; all rights reserved.</copyright>
    <lastBuildDate>Wed, 22 Feb 2017 19:59:46 +0800</lastBuildDate>
    
	<atom:link href="https://petanikode.gitlab.io/topik/twig/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cara Menggunakan Twig pada Slimframework</title>
      <link>https://petanikode.gitlab.io/cara-menggunakan-twig-pada-slimframework/</link>
      <pubDate>Wed, 22 Feb 2017 19:59:46 +0800</pubDate>
      
      <guid>https://petanikode.gitlab.io/cara-menggunakan-twig-pada-slimframework/</guid>
      <description>Twig merupakan sebuah template engine yang diklaim cepat, aman, dan fleksibel untuk PHP. Pada kesempatan ini, kita akan mencoba mengintegrasikan Twig dengan framework Slim.
Persiapan Instal Twig untuk Slim composer require slim/twig-view  Membuat Container $app = new \Slim\App(); // Get container $container = $app-&amp;gt;getContainer(); // Register component on container $container[&#39;view&#39;] = function ($container) { $view = new \Slim\Views\Twig(&#39;../app/templates&#39;); // Instantiate and add Slim specific extension $basePath = rtrim(str_ireplace(&#39;index.php&#39;, &#39;&#39;, $container[&#39;request&#39;]-&amp;gt;getUri()-&amp;gt;getBasePath()), &#39;/&#39;); $view-&amp;gt;addExtension(new Slim\Views\TwigExtension($container[&#39;router&#39;], $basePath)); return $view; };  Menggunakan Twig pada Router // Render Twig template in route $app-&amp;gt;get(&#39;/hi/{name}&#39;, function ($request, $response, $args) { return $this-&amp;gt;view-&amp;gt;render($response, &#39;profile.</description>
    </item>
    
  </channel>
</rss>