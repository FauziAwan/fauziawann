<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graf on Petani Kode — Programmer Pengguna Linux</title>
    <link>https://petanikode.com/topik/graf/index.xml</link>
    <description>Recent content in Graf on Petani Kode — Programmer Pengguna Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-id</language>
    <copyright>Copyright (c) 2017, Petani Kode; all rights reserved.</copyright>
    <atom:link href="https://petanikode.com/topik/graf/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cara Termudah Menyimpan Graf pada Database Relasional</title>
      <link>https://petanikode.com/cara-termudah-menyimpan-graf-pada-database-relasional/</link>
      <pubDate>Sat, 10 Dec 2016 15:53:00 +0000</pubDate>
      
      <guid>https://petanikode.com/cara-termudah-menyimpan-graf-pada-database-relasional/</guid>
      <description>&lt;p&gt;Pada awalnya saya sangat bingung tentang kegunaan graf dalam komputer. Karena itu, saya tidak begitu memperhatikan materi graf pada matakuliah Kalkulus. Namun, semuanya berubah setelah saya mengenal matakuliah Kecerdasan Buatan, Analisa Algoritma, Struktur Data, dsb. Ternyata penggunaan Graf dan Pohon &lt;i&gt;(tree)&lt;/i&gt; di matakuliah tersebut cukup banyak.&lt;br /&gt;&lt;br /&gt;Saya menjadi cukup penasaran tentang cara komputasi graf. Akhirnya saya belajar dari Google dan menerbitkan sebuah tulisan di blog ini yang berjudul &lt;i&gt;&lt;a href=&#34;http://www.petanikode.com/2016/11/representasi-graf-dalam-kode-python.html&#34; target=&#34;_blank&#34;&gt;Representasi Graf dalam Kode Python&lt;/a&gt;. &lt;/i&gt;Namun, sekarang saya ingin grafnya disimpan dalam database relasional seperti MySQL.&lt;br /&gt;&lt;br /&gt;Memikirkan sendiri cara penyimpanan graf dalam MySQL membuat saya pusing. Akhirnya saya menemukan sebuah &lt;i&gt;slide&lt;/i&gt; milik bapak &lt;a href=&#34;http://www.slideshare.net/billkarwin&#34; target=&#34;_blank&#34;&gt;Karwin&lt;/a&gt;. Beliau menjelaskan empat metode penyimpanan graf pada database relasional dan pada akhirnya membandingkan setiap metode.&lt;br /&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;485&#34; marginheight=&#34;0&#34; marginwidth=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;//www.slideshare.net/slideshow/embed_code/key/tI9jfoqFHAcQdn?startSlide=5&#34; style=&#34;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&#34; width=&#34;100%&#34;&gt; &lt;/iframe&gt; &lt;br /&gt;&lt;div style=&#34;margin-bottom: 5px;&#34;&gt;&lt;b&gt; &lt;a href=&#34;https://www.slideshare.net/billkarwin/models-for-hierarchical-data&#34; target=&#34;_blank&#34; title=&#34;Models for hierarchical data&#34;&gt;Models for hierarchical data&lt;/a&gt; &lt;/b&gt; from &lt;b&gt;&lt;a href=&#34;https://www.slideshare.net/billkarwin&#34; target=&#34;_blank&#34;&gt;Karwin Software Solutions LLC&lt;/a&gt;&lt;/b&gt; &lt;/div&gt;Perbandingan beliau pada slide tersebut, menentukan metode &lt;i&gt;Closeure Table&lt;/i&gt; terpilih sebagai yang termudah. Termudah yang saya maksudkan di sini adalah mudah untuk melakukan &lt;i&gt;Query&lt;/i&gt; CRUD &lt;i&gt;(Create, Read, Update, Delete)&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Masing-masing metode memang memiliki kelebihan dan kekurangan. Contohnya metode &lt;i&gt;Path Enumerattion&lt;/i&gt;, bagus digunakan untuk membuat &lt;i&gt;breadcrums. Sedangkan Adjacency List &lt;/i&gt;tidak bagus digunakan untuk graf yang punya banyak&lt;i&gt; node.&lt;/i&gt;&lt;br /&gt;&lt;h2&gt;Metode &lt;i&gt;Closure Table&lt;/i&gt;&lt;/h2&gt;Mari kita pelajari cara penyimpanan graf dengan metode &lt;i&gt;Closure Table&lt;/i&gt;. Misalkan, kita memiliki graf seperti pada gambar ini.&lt;br /&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-dWgknbxEzmU/WCLzqncwFzI/AAAAAAAADag/6wDc7P2eC7IwFY3dOdmTXHpcaT-woBqFQCK4B/s1600/graf%2Bberarah%2B-%2Bpetanikode.jpg&#34; imageanchor=&#34;1&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://3.bp.blogspot.com/-dWgknbxEzmU/WCLzqncwFzI/AAAAAAAADag/6wDc7P2eC7IwFY3dOdmTXHpcaT-woBqFQCK4B/s1600/graf%2Bberarah%2B-%2Bpetanikode.jpg&#34; /&gt;&lt;/a&gt;&lt;br /&gt;Anggaplah semua titik-titik pada graf tersebut merupakan sebuah kota yang saling terhubung. Kemudian, yang kita harus lakukan adalah membuat tabel untuk menyimpan kota (titik) dan jalan yang menghubungkannya.&lt;br /&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-rCy4_zOhkfE/WDmI8o6D06I/AAAAAAAADdY/cttgx1o55l4VGyGvr-toyHGhEk8aP1qtACK4B/s1600/Relasi%2BTabel%2BGraf.png&#34; imageanchor=&#34;1&#34;&gt;&lt;img alt=&#34;Diagram Relasi Tabel Graf&#34; border=&#34;0&#34; src=&#34;https://1.bp.blogspot.com/-rCy4_zOhkfE/WDmI8o6D06I/AAAAAAAADdY/cttgx1o55l4VGyGvr-toyHGhEk8aP1qtACK4B/s1600/Relasi%2BTabel%2BGraf.png&#34; title=&#34;&#34; /&gt;&amp;nbsp;&lt;/a&gt;&lt;br /&gt;Relasi yang akan tercipta adalah &lt;i&gt;Many-to-Many&lt;/i&gt;. Kolom &lt;code&gt;kota_asal&lt;/code&gt; dan &lt;code&gt;kota_tujuan&lt;/code&gt; akan menyimpan &lt;code&gt;id&lt;/code&gt; dari &lt;i&gt;kota&lt;/i&gt;. Kemudian kolom &lt;code&gt;panjang&lt;/code&gt; untuk menyimpan panjang jalannya.&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;create table kota(&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; id int,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; nama char,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; PRIMARY KEY(id)&lt;br /&gt;);&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;create table jalan(&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; kota_asal int,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; kota_tujuan int,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; panjang int,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; FOREIGN KEY(kota_asal) REFERENCES kota(id),&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; FOREIGN KEY(kota_tujuan) REFERENCES kota(id)&lt;br /&gt;);&lt;/code&gt;&lt;/pre&gt;Sekarang kita sudah punya dua tabel yang saling berelasi.&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-MpXwEwCU8Ek/WDmLo9QF4rI/AAAAAAAADdk/UsgJ7jVgr8IYkYm1GL7Vs2w-mTxw55HPACK4B/s1600/Relasi%2Btabel%2Bgraf%2Bdi%2Bdatabase%2Bmysql.png&#34; imageanchor=&#34;1&#34;&gt;&lt;img alt=&#34;Relasi tabel database Graf&#34; border=&#34;0&#34; src=&#34;https://4.bp.blogspot.com/-MpXwEwCU8Ek/WDmLo9QF4rI/AAAAAAAADdk/UsgJ7jVgr8IYkYm1GL7Vs2w-mTxw55HPACK4B/s1600/Relasi%2Btabel%2Bgraf%2Bdi%2Bdatabase%2Bmysql.png&#34; title=&#34;&#34; /&gt;&lt;/a&gt;&lt;br /&gt;Sekarang kita coba menambahkan semua titik pada graf:&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;INSERT INTO kota (id,nama) VALUE (1,&amp;lsquo;A&amp;rsquo;);&lt;br /&gt;INSERT INTO kota (id,nama) VALUE (2,&amp;lsquo;B&amp;rsquo;);&lt;br /&gt;INSERT INTO kota (id,nama) VALUE (3,&amp;lsquo;C&amp;rsquo;);&lt;br /&gt;INSERT INTO kota (id,nama) VALUE (4,&amp;rsquo;D&amp;rsquo;);&lt;br /&gt;INSERT INTO kota (id,nama) VALUE (5,&amp;lsquo;E&amp;rsquo;);&lt;br /&gt;INSERT INTO kota (id,nama) VALUE (6,&amp;lsquo;F&amp;rsquo;);&lt;/code&gt;&lt;/pre&gt;Selanjutnya menambahkan data jalan:&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;INSERT INTO jalan (kota_asal,kota_tujuan,panjang) VALUES (1,2,14);&lt;br /&gt;INSERT INTO jalan (kota_asal,kota_tujuan,panjang) VALUES (1,3,10);&lt;br /&gt;INSERT INTO jalan (kota_asal,kota_tujuan,panjang) VALUES (2,3,6);&lt;br /&gt;INSERT INTO jalan (kota_asal,kota_tujuan,panjang) VALUES (2,4,18);&lt;br /&gt;INSERT INTO jalan (kota_asal,kota_tujuan,panjang) VALUES (3,4,7);&lt;br /&gt;INSERT INTO jalan (kota_asal,kota_tujuan,panjang) VALUES (4,3,9);&lt;br /&gt;INSERT INTO jalan (kota_asal,kota_tujuan,panjang) VALUES (5,6,8);&lt;br /&gt;INSERT INTO jalan (kota_asal,kota_tujuan,panjang) VALUES (6,4,11);&lt;/code&gt;&lt;/pre&gt;Panjang jalan saya tentukan sendiri. Sekarang semuanya sudah masuk. Mari kita coba-coba melakukan &lt;i&gt;query&lt;/i&gt; yang lain. Misalnya, berapakah panjang jalan dari kota B menuju kota D?&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SELECT panjang FROM &lt;code&gt;jalan&lt;/code&gt; WHERE kota_asal=2 AND kota_tujuan=4 &lt;/code&gt;&lt;/pre&gt;Hasilnya:&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;+&amp;mdash;&amp;mdash;&amp;mdash;+&lt;br /&gt;| panjang |&lt;br /&gt;+&amp;mdash;&amp;mdash;&amp;mdash;+&lt;br /&gt;|      18 |&lt;br /&gt;+&amp;mdash;&amp;mdash;&amp;mdash;+&lt;br /&gt;1 row in set (0,00 sec)&lt;/code&gt;&lt;/pre&gt;Sebenarnya ada dua jalan yang bisa dilewati dari kota B menuju kota D, yaitu &lt;code&gt;B-&amp;gt;D&lt;/code&gt; dan &lt;code&gt;B-&amp;gt;C-&amp;gt;D&lt;/code&gt;. Akan tetapi &lt;i&gt;query&lt;/i&gt; tersebut hanya memilih jalur &lt;code&gt;B-&amp;gt;D&lt;/code&gt; saja. Untuk query yang lebih rumit, mungkin kita bisa lakukan dengan membuat program. Misalnya, program untuk menentukan jalur terpedek.&lt;br /&gt;&lt;br /&gt;File SQL contoh di atas dapat anda download di: &lt;a href=&#34;https://gist.github.com/ardianta/7ae139c95570a35d3af9dc40b70f18db&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://gist.github.com/ardianta/7ae139c95570a35d3af9dc40b70f18db&#34;&gt;https://gist.github.com/ardianta/7ae139c95570a35d3af9dc40b70f18db&lt;/a&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Begitulah cara termudah menyimpan graf pada database relasional. Metode &lt;i&gt;Closure Table&lt;/i&gt; memang yang termudah, namun pasti memiliki kekurangan. Saya kira metode inilah yang paling terbaik di antara kawan-kawannya, bagaimana menurutmu?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Representasi Graf dalam Kode Python</title>
      <link>https://petanikode.com/representasi-graf-dalam-kode-python/</link>
      <pubDate>Wed, 09 Nov 2016 19:29:00 +0000</pubDate>
      
      <guid>https://petanikode.com/representasi-graf-dalam-kode-python/</guid>
      <description>&lt;p&gt;Hari ini saya belajar sesuatu yang cukup menantang, yaitu graf. Bagaiaman menulis graf dalam kode? dan memahami beberapa hal tentang graf. Menurut Wikipedia, graf dalam komputer sains (ilmu komputer) adalah sebuah tipe data abstrak. Graf terdiri dari titik-titik &lt;i&gt;(nodes)&lt;/i&gt; yang terhubung dengan sisi/busur &lt;i&gt;(edge/arcs)&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Berikut ini contoh graf yang akan kita tulis dalam kode program python:&lt;br /&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-dWgknbxEzmU/WCLzqncwFzI/AAAAAAAADag/6wDc7P2eC7IwFY3dOdmTXHpcaT-woBqFQCK4B/s1600/graf%2Bberarah%2B-%2Bpetanikode.jpg&#34; imageanchor=&#34;1&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://3.bp.blogspot.com/-dWgknbxEzmU/WCLzqncwFzI/AAAAAAAADag/6wDc7P2eC7IwFY3dOdmTXHpcaT-woBqFQCK4B/s1600/graf%2Bberarah%2B-%2Bpetanikode.jpg&#34; /&gt;&lt;/a&gt;&lt;br /&gt;Graf tersebut merupakan graf berarah yang memiliki enam buah titik dan delapan busur &lt;i&gt;(arcs)&lt;/i&gt;. Adapun delapan busur tersebut bisa kita nyatakan seperti berikut ini.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;A -&amp;gt; B&lt;br /&gt;A -&amp;gt; C&lt;br /&gt;B -&amp;gt; C&lt;br /&gt;B -&amp;gt; D&lt;br /&gt;C -&amp;gt; D&lt;br /&gt;D -&amp;gt; C&lt;br /&gt;E -&amp;gt; F&lt;br /&gt;F -&amp;gt; C&lt;/code&gt;&lt;/pre&gt;Graf sebenarnya bisa diubah ke dalam bentuk matriks dan ditulis dalam bentuk &lt;i&gt;array&lt;/i&gt; dua dimensi ke dalam kode. Namun, karena contoh yang saya temukan menggunakan &lt;i&gt;dictionary&lt;/i&gt;, maka graf di atas bisa dituliskan seperti berikut ini.&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;py python&#34;&gt;graf = {&amp;lsquo;A&amp;rsquo;: [&amp;lsquo;B&amp;rsquo;, &amp;lsquo;C&amp;rsquo;],&lt;br /&gt;        &amp;lsquo;B&amp;rsquo;: [&amp;lsquo;C&amp;rsquo;, &amp;rsquo;D&amp;rsquo;],&lt;br /&gt;        &amp;lsquo;C&amp;rsquo;: [&amp;rsquo;D&amp;rsquo;],&lt;br /&gt;        &amp;rsquo;D&amp;rsquo;: [&amp;lsquo;C&amp;rsquo;],&lt;br /&gt;        &amp;lsquo;E&amp;rsquo;: [&amp;lsquo;F&amp;rsquo;],&lt;br /&gt;        &amp;lsquo;F&amp;rsquo;: [&amp;lsquo;C&amp;rsquo;]}&lt;/code&gt;&lt;/pre&gt;Pada kode di atas, kita menggunakan &lt;i&gt;dictionary&lt;/i&gt; untuk membuat graf dan menggunakan &lt;i&gt;list&lt;/i&gt; untuk menyimpan titik yang menjadi tetangga sebuah titik. Misalkan titik A, terbuhung dengan titik B dan C. Titik B terhubung dengan titik C dan D, dan seterusnya.&lt;br /&gt;&lt;h2&gt;Fungsi untuk Menentukan Jalur&lt;/h2&gt;Fungsi ini akan menemukan sebuah jalur &lt;i&gt;(path)&lt;/i&gt; dari titik awal hingga titik akhir atau tujuan.&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;python py&#34;&gt;def temukan_jalur(graf, awal, akhir, jalur=[]):&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; jalur = jalur + [awal]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if awal == akhir:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; return jalur&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if not graf.has_key(awal):&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; return None&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for titik in graf[awal]:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; if titik not in jalur:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; jalur_baru = temukan_jalur(graf, titik, akhir, jalur)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; if jalur_baru: return jalur_baru&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return None&lt;/code&gt;&lt;/pre&gt;Misalkan kita ingin mencari jalur dari titik A ke titik D, maka kita bisa menggunakan fungsi tersebut.&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; temukan_jalur(graf, &amp;lsquo;A&amp;rsquo;, &amp;rsquo;D&amp;rsquo;)&lt;br /&gt;[&amp;lsquo;A&amp;rsquo;, &amp;lsquo;B&amp;rsquo;, &amp;lsquo;C&amp;rsquo;, &amp;rsquo;D&amp;rsquo;]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Fungsi untuk Menentukan Semua Jalur&lt;/h2&gt;Pada fungsi di atas, kita hanya diberikan satu jalur saja. Sedangkan fungsi berikut ini akan mengembalikan semua jalur yang bisa dilalui dari titik awal hingga akhir.&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;py&#34;&gt;def temukan_semua_jalur(graf, awal, akhir, jalur=[]):&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; jalur = jalur + [awal]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if awal == akhir:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return [jalur]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if not graf.has_key(awal):&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return []&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; semua_jalur = []&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for titik in graf[awal]:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if titik not in jalur:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; jalur_jalur = temukan_semua_jalur(graf, titik, akhir, jalur)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for jalur_baru in jalur_jalur:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; semua_jalur.append(jalur_baru)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return semua_jalur&lt;/code&gt;&lt;/pre&gt;Misalkan kita ingin mencari semua jalur yang mungkin bisa dilalui dari titik A ke titik D, maka fungsi tersebut akan mengembalikan semua jalur dalam bentuk &lt;i&gt;list&lt;/i&gt;.&lt;br /&gt;&lt;pre&gt;&lt;code class=&#34;py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; temukan_semua&lt;em&gt;jalur(graf, &amp;lsquo;A&amp;rsquo;, &amp;rsquo;D&amp;rsquo;)&lt;br /&gt;[[&amp;lsquo;A&amp;rsquo;, &amp;lsquo;B&amp;rsquo;, &amp;lsquo;C&amp;rsquo;, &amp;rsquo;D&amp;rsquo;], [&amp;lsquo;A&amp;rsquo;, &amp;lsquo;B&amp;rsquo;, &amp;rsquo;D&amp;rsquo;], [&amp;lsquo;A&amp;rsquo;, &amp;lsquo;C&amp;rsquo;, &amp;rsquo;D&amp;rsquo;]]&lt;/code&gt;&lt;/pre&gt;Pada hasil eksekusi fungsi tersebut, kita diberikan tiga buah jalur yang bisa dilalui dari titik A menuju titik D. &lt;br /&gt;&lt;h2&gt;Kesimpulan&lt;/h2&gt;Representasi graf ke dalam kode python dapat dilakukan dengan &lt;i&gt;dictionary&lt;/i&gt; dan &lt;i&gt;list&lt;/i&gt;. Semua titik dalam graf dijadikan kunci &lt;i&gt;(key)&lt;/i&gt; dalam &lt;i&gt;dictionary&lt;/i&gt;. Kemudian menyimpan titik tetangganya dalam &lt;i&gt;list&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Referensi:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&amp;lt;a href=&amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Graph&#34;&gt;https://en.wikipedia.org/wiki/Graph&lt;/a&gt;&lt;/em&gt;(abstract_data_type)&amp;rdquo; target=&amp;rdquo;&lt;em&gt;blank&amp;rdquo;&amp;gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Graph&#34;&gt;https://en.wikipedia.org/wiki/Graph&lt;/a&gt;&lt;/em&gt;(abstract_data_type)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.python.org/doc/essays/graphs/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.python.org/doc/essays/graphs/&#34;&gt;https://www.python.org/doc/essays/graphs/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>